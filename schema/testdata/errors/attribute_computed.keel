model Item {
    fields {
        //expect-error:23:32:AttributeArgumentError:0 argument(s) provided to @computed but expected 1
        total Decimal @computed
        //expect-error:26:47:AttributeNotAllowedError:@computed cannot be used on repeated fields
        //expect-error:36:46:AttributeExpressionError:expression expected to resolve to type Decimal[] but it is Decimal
        totals Decimal[] @computed(item.total)
        //expect-error:19:36:AttributeNotAllowedError:@computed cannot be used on field of type File
        file File @computed("file")
        //expect-error:23:42:AttributeNotAllowedError:@computed cannot be used on field of type Vector
        vector Vector @computed("vector")
        //expect-error:27:48:AttributeNotAllowedError:@computed cannot be used on field of type Password
        password Password @computed("password")
        //expect-error:23:42:AttributeNotAllowedError:@computed cannot be used on field of type Secret
        secret Secret @computed("secret")
        //expect-error:28:39:AttributeExpressionError:@default cannot be used with computed fields
        withDefault Number @default(1) @computed(1 + 1)
        //expect-error:31:33:AttributeExpressionError:expression expected to resolve to type Thing but it is Text
        thing Thing @computed("")

    }
    actions {
        get getItem(id) {
            //expect-error:13:22:E011:actions 'getItem' has an unrecognised attribute @computed
            @computed(price * quantity)
        }
    }
    //expect-error:5:14:E011:model 'Item' has an unrecognised attribute @computed
    @computed(price * quantity)
}

model Thing {
    fields {
        total Decimal @computed(1 + 1)
        //expect-error:22:35:AttributeNotAllowedError:@computed cannot be used on this side of a relationship
        //expect-error:32:34:AttributeExpressionError:expression expected to resolve to type Item[] but it is Text
        items Item[] @computed("")
    }
    actions {
        //expect-error:35:40:ActionInputError:computed fields cannot be used as inputs as they are automatically generated
        create createItem() with (total) 
    }
}