syntax = "proto3";

package proto;

option go_package = "github.com/teamkeel/keel/proto";

import "google/protobuf/wrappers.proto";

message Schema {
    repeated Model models = 1;
    repeated Role roles = 2;
    repeated Api apis = 3;
    repeated Enum enums = 4;
    repeated EnvironmentVariable environment_variables = 5;
    repeated Message messages = 6;
    repeated Secret secrets = 7;
    repeated Job jobs = 8;
    repeated Subscriber subscribers = 9;
    repeated Event events = 10;
    repeated Route routes = 11;
}

message Model {
    // The name of the model. Must be in PascalCase and be unique within the schema.
    string name = 1;

    // The fields this model contains
    repeated Field fields = 2;

    // The actions this model defines. Contains both actions that will be auto
    // generated and also functions
    repeated Action actions = 3;

    repeated PermissionRule permissions = 4;
}

message Field {
    // The name of the model this field belongs to.
    string model_name = 1;

    // The name of the field. Must be in lowerCamelCase and be unique within the model.
    string name = 2;

    // Info regarding the type of this field
    TypeInfo type = 3;

    // If true then this field is allowed to be null
    bool optional = 4;

    // If true then this field will have a unique constraint added to it meaning
    // a given value can only exist in a single row.
    // Cannot be true if `type.repeated` is true
    bool unique = 5;

    // If set then this field is part of a compount unique constraint with the
    // fields listed. The fields must be part of the same model and they must
    // list this field in their unique_with value.
    repeated string unique_with = 8;

    // If true then this field will be set as the primary key for the parent model
    bool primary_key = 7;

    // If this field is of type TYPE_MODEL then this field indicates which field on _this_
    // model is the foriegn key. This field should always be populated on the many side of a
    // one-to-many relationship and on the unique side of a one-to-one.
    google.protobuf.StringValue foreign_key_field_name = 10;

    // This describes how the default value of this field should be created
    DefaultValue default_value = 9;

    // This only applies to the foreign key fields that we auto inject.
    // If it is non null it *defines* this field as being a foreign key field,
    // and carries corresponding metadata.
    ForeignKeyInfo foreign_key_info = 11;

    // If this field is of type MODEL and the related model has an inverse field
    // to this one, then this field is set to that field name.
    // For example if a Post model has a field called author which is of type Author,
    // and then Author has posts which is of type Post, on the Post.author field this
    // value will be "posts" and on the Author.posts field this value will be "author".
    google.protobuf.StringValue inverse_field_name = 12;

    // If computed then this field will contain the expression that will be evaluated to
    // determine the value of the field at runtime.
    Expression computed_expression = 13;
}

message ForeignKeyInfo {
    string related_model_name = 1;
    string related_model_field = 2;
}

message DefaultValue {
    // If true then a "zero" value is used for the field, for example
    // a string has a zero value of "" and a date has a zero value of
    // today
    bool use_zero_value = 1;

    // This can be used to explicitly set the default value
    Expression expression = 2;
}

message Action {
    // The name of the model this action belongs to.
    string model_name = 1;

    // The name of the action. Must be in lowerCamelCase and be unique across all actions
    // across all models within the schema. This is because in both RPC and GraphQL actions
    // are top-level and so two different models can't both define an actions with the same name.
    string name = 2;

    // The type of this action.
    ActionType type = 3;

    // Whether this action will be auto-generated by Keel or implemented with a function.
    ActionImplementation implementation = 4;

    // Reserved for legacy ActionInput type.
    reserved 5;

    // A list of permission rules to apply to this action
    repeated PermissionRule permissions = 6;

    // A list of assignment expression to be executed as part of this action.
    // Only valid in `type` is ACTION_TYPE_CREATE or ACTION_TYPE_UPDATE
    repeated Expression set_expressions = 7;

    // A list of logical expressions to be applied to the database query being
    // executed as part of the action.
    // Not valid if `type` is ACTION_TYPE_CREATE
    // If there are multiple entries in this field they are AND'd.
    repeated Expression where_expressions = 8;

    // A list of expressions that perform some kind of validation (likely on the inputs).
    repeated Expression validation_expressions = 9;

    // A ordered list of order by statements.
    repeated OrderByStatement order_by = 10;

    // The name of the input message type for this action.
    string input_message_name = 11;

    // The name of the response message type for this action when not a built-in action. This is because
    // built-in action responses are determined by the action type (get, list, create, update, delete).
    string response_message_name = 12;

    // Embedded data can be attached to the response message of built in actions (get, list).
    repeated string response_embeds = 13;

    // Field names to facet on as defined with @facet in the schema.
    repeated string facets = 14;
}

message Role {
    // The name of the role
    string name = 1;

    // A list of domains to match for this role e.g. myorg.com
    repeated string domains = 2;

    // A list of specific email addresses to match for this role eg. sarah@myorg.com
    repeated string emails = 3;
}

message PermissionRule {
    // Name of the model this permission rule applies to
    string model_name = 1;

    // Name of the specific action this permission rule applies to.
    // If this field is populated then `action_types` is ignored.
    google.protobuf.StringValue action_name = 2;

    // A name of a Role that has been defined in the schema.
    // Cannot be provided if `expression` is provided.
    repeated string role_names = 3;

    // An expression to evaluate at runtime.
    // Cannot be provided if `role_name` is provided.
    Expression expression = 4;

    // A list of action types that this permission rule applies to
    // Should not be set if `action_name` is provided.
    repeated ActionType action_types = 5;
}

message OrderByStatement {
    // The name of the field to perform ordering on.
    string field_name = 1;

    // The direction in which to order.
    OrderDirection direction = 2;
}

message Expression {
    string source = 1;
}

message Api {
    string name = 1;
    repeated ApiModel api_models = 3;
}

message ApiModel {
    string model_name = 1;
    repeated ApiModelAction model_actions = 2;
}

message ApiModelAction {
    string action_name = 1;
}

message Enum {
    string name = 1;
    repeated EnumValue values = 2;
}

message EnumValue {
    string name = 1;
}

message Message {
    // Name of the input or response message. Either generated from built-in
    // actions, hard-coded into the runtime (e.g. AuthenticateResponseMessage),
    // or specified in the schema using the message keyword.
    string name = 1;

    // The input or response fields for this message.
    repeated MessageField fields = 2;

    // The message could be a Keel type and not an object.
    // Cannot be provided along with fields.
    TypeInfo type = 3;
}

message MessageField {
    // Name of the parent message.
    string message_name = 1;

    // Name of the field.
    string name = 2;

    // The type of this field.
    TypeInfo type = 3;

    // Set to true if this can be omitted.
    bool optional = 4;

    // Set to true if this can be set to the null value.
    bool nullable = 6;

    // Only valid for implicit inputs on built-in actions (ACTION_IMPLEMENTATION_AUTO)
    // This field can be set to a path, from the current model, to a field that should
    // be read from or written to automatically by the runtime.
    // As an example if the parent model had a field called `item` which was a relationship to
    // an `Item` model which itself had a field called `price`, and this input wanted to filter
    // on the item price, then the value of `target` would be ["item", "price"].
    repeated string target = 5;
}

message TypeInfo {
    // The type of the field.
    Type type = 1;

    // If `type` is set to TYPE_ENUM then this value is the name of the
    // the enum that the type refers to.
    google.protobuf.StringValue enum_name = 2;

    // If this field is set then this type is referring to another model.
    // In the case of TYPE_MODEL this type _is_ the model named here.
    // In the case of other types e.g. TYPE_ID this type is referencing a field
    // on the model named here, and the specific field being referenced is indicated
    // by `field_name`.
    google.protobuf.StringValue model_name = 3;

    // This field indicates which field on `model_name` this type is referencing.
    // This field should only be set if `model_name` is set.
    google.protobuf.StringValue field_name = 5;

    // Only valid within a Message
    google.protobuf.StringValue message_name = 6;

    // If true then is type is an array of it's `type`
    bool repeated = 4;

    // A union type describes a value that can be one of several types.
    // When TypeInfo's type property is set to UNION, then any one of the type names
    // listed here can be used as input. Currently only support messages.
    repeated google.protobuf.StringValue union_names = 7;

    // For types which are in a union, it is optional to provide a value to discriminate on.
    // This is only useful in TypeScript type generation, where this will make type a string literal type.
    google.protobuf.StringValue string_literal_value = 8;
}

message EnvironmentVariable {
  string name = 1;
  bool required = 2;
}

message Secret {
  string name = 1;
  bool required = 2;
}

// Describes where and by which party the implementation for an action is provided.
enum ActionImplementation {
    ACTION_IMPLEMENTATION_UNKNOWN = 0;

    // Auto means the implementation of the action is generated by Keel based on the
    // specified action type (get, create, update, list, delete)
    ACTION_IMPLEMENTATION_AUTO = 1;

    // Custom means the implementation of the action is provided via custom functions code.
    // The code itself is not represented in this proto schema.
    ACTION_IMPLEMENTATION_CUSTOM = 2;

    // Runtime means the implementation of the action is provided in the runtime code.
    ACTION_IMPLEMENTATION_RUNTIME = 3;
}

// Describes the behaviour of an action and a preordained input and output specification.
enum ActionType {
    ACTION_TYPE_UNKNOWN = 0;

    // Creates a new record and returns it.
    ACTION_TYPE_CREATE = 1;

    // Returns a single record by looking up on a unique field.
    ACTION_TYPE_GET = 2;

    // Lists records optionally filtering on certain fields. The response would be a
    // an object that supports pagination functionality and contains a "page" of results.
    ACTION_TYPE_LIST = 3;

    // Update a single record by providing a unique lookup and some fields to update.
    // The resulting record is returned.
    ACTION_TYPE_UPDATE = 4;

    // Delete a record and returns it's ID.
    ACTION_TYPE_DELETE = 5;

    // A generic read action.
    ACTION_TYPE_READ = 6;

    // A generic write action.
    ACTION_TYPE_WRITE = 7;
}

enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_STRING = 1;
    TYPE_BOOL = 2;
    TYPE_INT = 3;
    TYPE_TIMESTAMP = 4;
    TYPE_DATE = 5;
    TYPE_ID = 6;
    TYPE_MODEL = 7;
    TYPE_CURRENCY = 8;
    TYPE_DATETIME = 9;
    TYPE_ENUM = 10;
    TYPE_IMAGE = 12;
    TYPE_OBJECT = 13;
    // Used for sensitive data. Encrypted at rest, decrypted on read.
    TYPE_SECRET = 14;
    // Used for hashing passwords and passcodes with the intention to verify admission.
    TYPE_PASSWORD = 15;
    TYPE_MESSAGE = 16;
    // Any is used in Message types to denote a field with any type.
    TYPE_ANY = 17;
    // Used to specify a sort direction argument.
    TYPE_SORT_DIRECTION = 18;
    // A union type describes a value that can be one of several types.
    // These types are listed in TypeInfo's Union_Names property.
    TYPE_UNION = 19;
    // A string literal type which can be used to discriminate on in our Typescript types.
    // TYPE_INFO string_literal_type must also be set.
    TYPE_STRING_LITERAL = 20;
    // Markdown rich text field.
    TYPE_MARKDOWN = 21;
    // Decimal number type; fixed precision.
    TYPE_DECIMAL = 22;
    // A vector type.
    TYPE_VECTOR = 23;
    // A file storage type.
    TYPE_FILE = 24;
    // A relative period expression string; e.g. `today/next year`
    TYPE_RELATIVE_PERIOD = 25;
    // A time duration
    TYPE_DURATION = 26;
}

enum OrderDirection {
    ORDER_DIRECTION_UNKNOWN = 0;
    ORDER_DIRECTION_ASCENDING = 1;
    ORDER_DIRECTION_DECENDING = 2;
}

message Job {
    // The name of the job.
    string name = 1;

    // The inputs defined on the job.
    string input_message_name = 2;

    // A permission rule which need to be satisfied in order to run the job.
    repeated PermissionRule permissions = 3;

    // The schedule as an crontab expression.
    Schedule schedule = 4;
}

message Schedule {
    string expression = 1;
}

message Subscriber {
    // The name of the subscriber function. e.g. sendWelcomeMail.
    string name = 1;

    // The input message for this function.
    // The structure of this is determined by the events handled by this subscriber.
    string input_message_name = 2;

    // The events which are handled by this subscriber.
    repeated string event_names = 3;
}

// Events that can be triggered based on what has been defined in the schema.
// At the moment, we only support model-level events for create, update and delete mutations.
// This can be extended to support other kinds of events.
message Event {
    // The name of this event, for example: account.created
    string name = 1;

    // The name of the model.
    string model_name = 2;

    // Action type (create, update or delete).
    ActionType action_type = 3;
}

enum HttpMethod {
    HTTP_METHOD_UNKNOWN = 0;
    HTTP_METHOD_GET = 1;
    HTTP_METHOD_POST = 2;
    HTTP_METHOD_PUT = 3;
    HTTP_METHOD_DELETE = 4;
}

message Route {
    HttpMethod method = 1;
    string pattern = 2;
    string handler = 3;
}