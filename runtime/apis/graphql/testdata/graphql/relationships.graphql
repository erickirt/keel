type Query {
  _health: Boolean
  getOrder(input: GetOrderInput!): Order
  listOrderItems(input: ListOrderItemsInput!): OrderItemConnection!
}

input GetOrderInput {
  id: ID!
}

input IdQueryInput {
  equals: ID
  notEquals: ID
  oneOf: [ID]
}

input ListOrderItemsInput {
  after: String
  before: String
  first: Int
  last: Int
  limit: Int
  offset: Int
  where: ListOrderItemsWhere!
}

input ListOrderItemsOrderInput {
  id: IdQueryInput!
}

input ListOrderItemsWhere {
  order: ListOrderItemsOrderInput!
}

type Order {
  createdAt: Timestamp!
  id: ID!
  items(after: String, before: String, first: Int, last: Int): OrderItemConnection!
  updatedAt: Timestamp!
}

type OrderItem {
  createdAt: Timestamp!
  id: ID!
  order: Order!
  orderId: ID!
  price: Int!
  updatedAt: Timestamp!
}

type OrderItemConnection {
  edges: [OrderItemEdge!]!
  pageInfo: PageInfo!
}

type OrderItemEdge {
  node: OrderItem!
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  pageNumber: Int
  startCursor: String!
  totalCount: Int!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

scalar Any

scalar ISO8601
