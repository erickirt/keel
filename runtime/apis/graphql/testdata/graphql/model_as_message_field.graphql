type Query {
  _health: Boolean
  listUsers(input: ListUsersInput): UserConnection!
}

type Mutation {
  setIdentity(input: SetIdentityInput!): User!
  updateUser(input: UpdateUserInput!): Any
}

input ListUsersInput {
  after: String
  before: String
  first: Int
  last: Int
  limit: Int
  offset: Int
}

input SetIdentityInput {
  where: SetIdentityWhere!
}

input SetIdentityWhere {
  id: ID!
}

input UpdateUserInput {
  user: User!
}

type Identity {
  createdAt: Timestamp!
  email: String
  emailVerified: Boolean!
  externalId: String
  familyName: String
  gender: String
  givenName: String
  id: ID!
  issuer: String
  locale: String
  middleName: String
  name: String
  nickName: String
  picture: String
  profile: String
  updatedAt: Timestamp!
  website: String
  zoneInfo: String
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  pageNumber: Int
  startCursor: String!
  totalCount: Int!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

type User {
  createdAt: Timestamp!
  email: String!
  firstName: String!
  id: ID!
  identity: Identity
  identityId: ID
  lastName: String!
  updatedAt: Timestamp!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
}

scalar Any

scalar ISO8601
