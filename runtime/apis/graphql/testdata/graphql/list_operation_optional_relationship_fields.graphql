type Query {
  _health: Boolean
  listPeople(input: ListPeopleInput!): PersonConnection!
  listPeopleOptionalFields(input: ListPeopleOptionalFieldsInput!): PersonConnection!
  listPeopleOptionalInputs(input: ListPeopleOptionalInputsInput): PersonConnection!
}

input ListPeopleEmployerInput {
  name: StringQueryInput!
}

input ListPeopleInput {
  after: String
  before: String
  first: Int
  last: Int
  limit: Int
  offset: Int
  where: ListPeopleWhere!
}

input ListPeopleOptionalFieldsInput {
  after: String
  before: String
  first: Int
  last: Int
  limit: Int
  offset: Int
  where: ListPeopleOptionalFieldsWhere!
}

input ListPeopleOptionalFieldsOptionalEmployerInput {
  optionalName: StringQueryInput!
}

input ListPeopleOptionalFieldsWhere {
  optionalEmployer: ListPeopleOptionalFieldsOptionalEmployerInput!
  optionalName: StringQueryInput!
}

input ListPeopleOptionalInputsEmployerInput {
  name: StringQueryInput
}

input ListPeopleOptionalInputsInput {
  after: String
  before: String
  first: Int
  last: Int
  limit: Int
  offset: Int
  where: ListPeopleOptionalInputsWhere
}

input ListPeopleOptionalInputsWhere {
  employer: ListPeopleOptionalInputsEmployerInput
  name: StringQueryInput
}

input ListPeopleWhere {
  employer: ListPeopleEmployerInput!
  name: StringQueryInput!
}

input StringQueryInput {
  contains: String
  endsWith: String
  equals: String
  notEquals: String
  oneOf: [String]
  startsWith: String
}

type Company {
  createdAt: Timestamp!
  id: ID!
  name: String!
  optionalName: String!
  updatedAt: Timestamp!
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  pageNumber: Int
  startCursor: String!
  totalCount: Int!
}

type Person {
  createdAt: Timestamp!
  employer: Company!
  employerId: ID!
  id: ID!
  name: String!
  optionalEmployer: Company
  optionalEmployerId: ID
  optionalName: String
  updatedAt: Timestamp!
}

type PersonConnection {
  edges: [PersonEdge!]!
  pageInfo: PageInfo!
}

type PersonEdge {
  node: Person!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

scalar Any

scalar ISO8601
