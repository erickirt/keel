type Query {
  _health: Boolean
  listAuthors(input: ListAuthorsInput): AuthorConnection!
}

input ListAuthorsInput {
  after: String
  before: String
  first: Int
  last: Int
  limit: Int
  offset: Int
  orderBy: [ListAuthorsInputOrderBy]
}

input ListAuthorsInputOrderBy {
  firstName: SortDirection
  surname: SortDirection
}

type Author {
  createdAt: Timestamp!
  firstName: String!
  id: ID!
  surname: String!
  updatedAt: Timestamp!
}

type AuthorConnection {
  edges: [AuthorEdge!]!
  pageInfo: PageInfo!
}

type AuthorEdge {
  node: Author!
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  pageNumber: Int
  startCursor: String!
  totalCount: Int!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

enum SortDirection {
  asc
  desc
}

scalar Any

scalar ISO8601
