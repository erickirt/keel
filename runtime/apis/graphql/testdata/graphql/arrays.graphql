type Query {
  _health: Boolean
  things(input: ThingsInput!): ThingConnection!
}

input DateArrayAllQueryInput {
  after: ISO8601
  afterRelative: String
  before: ISO8601
  beforeRelative: String
  equals: ISO8601
  equalsRelative: String
  notEquals: ISO8601
  onOrAfter: ISO8601
  onOrBefore: ISO8601
}

input DateArrayAnyQueryInput {
  after: ISO8601
  afterRelative: String
  before: ISO8601
  beforeRelative: String
  equals: ISO8601
  equalsRelative: String
  notEquals: ISO8601
  onOrAfter: ISO8601
  onOrBefore: ISO8601
}

input DateArrayQueryInput {
  all: DateArrayAllQueryInput
  any: DateArrayAnyQueryInput
  equals: [ISO8601]
  notEquals: [ISO8601]
}

input IntArrayAllQueryInput {
  equals: Int
  greaterThan: Int
  greaterThanOrEquals: Int
  lessThan: Int
  lessThanOrEquals: Int
  notEquals: Int
}

input IntArrayAnyQueryInput {
  equals: Int
  greaterThan: Int
  greaterThanOrEquals: Int
  lessThan: Int
  lessThanOrEquals: Int
  notEquals: Int
}

input IntArrayQueryInput {
  all: IntArrayAllQueryInput
  any: IntArrayAnyQueryInput
  equals: [Int]
  notEquals: [Int]
}

input MyEnumArrayAllQueryInput {
  equals: MyEnum
  notEquals: MyEnum
}

input MyEnumArrayAnyQueryInput {
  equals: MyEnum
  notEquals: MyEnum
}

input MyEnumArrayQueryInput {
  all: MyEnumArrayAllQueryInput
  any: MyEnumArrayAnyQueryInput
  equals: [MyEnum]
  notEquals: [MyEnum]
}

input StringArrayAllQueryInput {
  equals: String
  notEquals: String
}

input StringArrayAnyQueryInput {
  equals: String
  notEquals: String
}

input StringArrayQueryInput {
  all: StringArrayAllQueryInput
  any: StringArrayAnyQueryInput
  equals: [String]
  notEquals: [String]
}

input ThingsInput {
  after: String
  before: String
  first: Int
  last: Int
  limit: Int
  offset: Int
  where: ThingsWhere!
}

input ThingsWhere {
  dates: DateArrayQueryInput!
  enums: MyEnumArrayQueryInput!
  numbers: IntArrayQueryInput!
  texts: StringArrayQueryInput!
}

type Date {
  formatted(format: String!): String!
  iso8601: String!
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  pageNumber: Int
  startCursor: String!
  totalCount: Int!
}

type Thing {
  createdAt: Timestamp!
  dates: [Date]
  enums: [MyEnum]
  id: ID!
  numbers: [Int]
  texts: [String]
  updatedAt: Timestamp!
}

type ThingConnection {
  edges: [ThingEdge!]!
  pageInfo: PageInfo!
}

type ThingEdge {
  node: Thing!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

enum MyEnum {
  One
  Three
  Two
}

scalar Any

scalar ISO8601
