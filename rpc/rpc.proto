syntax = "proto3";
package rpc;

// option go_package = "apis/rpc";
import "schema.proto";
import "tools.proto";
import "opentelemetry/proto/trace/v1/trace.proto";
import "google/protobuf/timestamp.proto";


message GetSchemaRequest {
	string environment_id = 1;
}

message GetSchemaResponse {
	proto.Schema schema = 1;
}

message SQLQueryInput {
	string projectID = 1;
	string environmentID = 2;
	string query = 3;
	optional bool writeMode = 4;
}

message SQLQueryResponse {
	SQLQueryStatus status = 1;
	int32 executionDuration = 2;
	string resultsJSON = 3;
	int32 totalRows = 4;
	string error = 5;
}

enum SQLQueryStatus {
	success = 0;
	failed = 1;
}

message GetTraceRequest {
	string trace_id = 1;
}

message GetTraceResponse {
	opentelemetry.proto.trace.v1.TracesData trace = 1;
}

message ListTracesRequest {
	string environment_id = 1;
	google.protobuf.Timestamp before = 2;
	google.protobuf.Timestamp after = 3;
	repeated ListTraceFilter filters = 4;
	int32 limit = 5;
	int32 offset = 6;
}

message ListTraceFilter {
	string field = 1;
	string value = 2;
}

message ListTracesResponse {
	repeated TraceItem traces = 1;
}

message TraceItem {
	string trace_id = 1;
	string environment_id = 2;
	google.protobuf.Timestamp start_time = 3;
	google.protobuf.Timestamp end_time = 4;
	bool error = 5;
	float duration_ms = 6;
	string root_name = 7;
	string project_id = 8;
	string deployment_id = 9;
	string runtime_version = 10;
}

service API {
	rpc GetActiveSchema(GetSchemaRequest) returns (GetSchemaResponse);
	rpc RunSQLQuery(SQLQueryInput) returns (SQLQueryResponse);
	rpc GetTrace(GetTraceRequest) returns (GetTraceResponse);
	rpc ListTraces(ListTracesRequest) returns (ListTracesResponse);

	// Return a list of default generated tools config for interacting with the API
	rpc ListTools(ListToolsRequest) returns (ListToolsResponse);
	// Delete all existing tools configuration (if any) and regenerate default tools.
	rpc ResetTools(ResetToolsRequest) returns (ResetToolsResponse);
	// Updates a tool by providing the complete action config
	rpc ConfigureTool(ConfigureToolRequest) returns (tools.ActionConfig);
	// Duplicates the given tool (given by reference) and returns the new tool
	rpc DuplicateTool(DuplicateToolRequest) returns (tools.ActionConfig);
}

message ListToolsRequest {}

message ListToolsResponse {
	repeated tools.ActionConfig tools = 1;
}

message ResetToolsRequest {}

message ResetToolsResponse {
	repeated tools.ActionConfig tools = 1;
}

message ConfigureToolRequest {
	tools.ActionConfig configured_tool = 2;	
}

message DuplicateToolRequest {
	// A tool reference, e.g. `list-categories-1`
	string tool_id = 2;	
}
